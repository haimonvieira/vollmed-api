Aplicando SOD do SOLID

Single Responsability Principle
- Em cada classe de validacao do pacote validacoes

Open-Closed Principle
- A classe service está fechada para modificações, não é necessário mexer nela,
 mas pode ser adicionado novos validadores

Dependency Inversion Principle
- A classe service depende de uma abstracao que e uma interface

SOLID é uma sigla que representa cinco princípios de programação:
- Single Responsibility Principle (Princípio da Responsabilidade Única)
- Open-Closed Principle (Princípio Aberto-Fechado)
- Liskov Substitution Principle (Princípio da Substituição de Liskov)
- Interface Segregation Principle (Princípio da Segregação de Interface)
- Dependency Inversion Principle (Princípio da Inversão de Dependência)

Cada princípio representa uma boa prática de programação,
que quando aplicadas facilita muito a sua manutenção e extensão.
Tais princípios foram criados por Robert Martin, conhecido como Uncle Bob,
em seu artigo Design Principles and Design Patterns.
http://staff.cs.utu.fi/~jounsmed/doos_06/material/DesignPrinciplesAndPatterns.pdf

Estes dois episódios do podcast Hipsters.Tech foram dedicados ao tema SOLID:

Hipsters #129 - Práticas de Orientação a Objetos
https://cursos.alura.com.br/extra/hipsterstech/praticas-de-orientacao-a-objetos-hipsters-129-a453
Hipsters #219 - SOLID: Código bom e bonito
https://cursos.alura.com.br/extra/hipsterstech/solid-codigo-bom-e-bonito-hipsters-ponto-tech-219-a649